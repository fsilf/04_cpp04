#+title: cpp04 Notes
#+author: fsilvaf


* Use of public, protected and public in a class declaration
References:
- [[https://stackoverflow.com/questions/1563765/use-of-public-in-a-derived-class-declaration][Stack - Use of "Public" in a derived class declaration?]]
- [[https://stackoverflow.com/questions/860339/what-is-the-difference-between-public-private-and-protected-inheritance-in-c/1372858#1372858][Stack - What is the difference between public, private, and protected inheritance in C++?]]

#+begin_src cpp
  class A 
  {
      public:
	 int x;
      protected:
	 int y;
      private:
	 int z;
  };

  class B : public A
  {
      // x is public
      // y is protected
      // z is not accessible from B
  };

  class C : protected A
  {
      // x is protected
      // y is protected
      // z is not accessible from C
  };

  class D : private A    // 'private' is default for classes
  {
      // x is private
      // y is private
      // z is not accessible from D
  };
#+end_src

* Polymorphism, abstract classes and interfaces

** Polymorphism
A polymorphic class is a class that defines or inherits at least one virtual function.

*** Polymorphic classes and public copy/move
- [[https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c67-a-polymorphic-class-should-suppress-public-copymove][A polymorphic class should suppress public copy/move]]

A polymorphic class is a class that defines or inherits at least one virtual function. It is likely that it will be used as a base class for other derived classes with polymorphic behavior. If it is accidentally passed by value, with the implicitly generated copy constructor and assignment, we risk slicing: only the base portion of a derived object will be copied, and the polymorphic behavior will be corrupted.

If the class has no data, =delete the copy/move functions. Otherwise, make them protected.

#+begin_src cpp
  class B { // GOOD: polymorphic class suppresses copying
  public:
      B() = default;
      B(const B&) = delete;
      B& operator=(const B&) = delete;
      virtual char m() { return 'B'; }
      // ...
  };

  class D : public B {
  public:
      char m() override { return 'D'; }
      // ...
  };

  void f(B& b)
  {
      auto b2 = b; // ok, compiler will detect inadvertent copying, and protest
  }

  D d;
  f(d);
#+end_src

If you need to create deep copies of polymorphic objects, use ~clone()~ functions: see C.130.

**** Exception objects
Classes that represent exception objects need both to be polymorphic and copy-constructible.

**** Enforcement
- Flag a polymorphic class with a public copy operation.
- Flag an assignment of polymorphic class objects.


*** For polymorphic classes provide a virtual clone function if copy is needed
References:
- [[https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c130-for-making-deep-copies-of-polymorphic-classes-prefer-a-virtual-clone-function-instead-of-public-copy-constructionassignment][CPP Core Guidelines -  For making deep copies of polymorphic classes prefer a virtual clone function instead of public copy construction/assignment]]
- [[https://stackoverflow.com/questions/5148706/copying-a-polymorphic-object-in-c][stack - copying a polymorphic object]]
- [[https://stackoverflow.com/a/25813536][stack - What exactly are covariant return types in C++?]]
- [[https://stackoverflow.com/a/5148751][stack - Copying a Polymorphic object in C++]]

Copying a polymorphic class is discouraged due to the slicing problem, see [[https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-copy-virtual][C.67]]. If you really need copy semantics, copy deeply: Provide a ~virtual clone~ function that will copy the actual most-derived type and return an owning pointer to the new object, and then in derived classes return the derived type (use a covariant return type).

Note: Covariant return types allow overridden virtual member functions in a derived class to return a different type of object, as long as it can be used in all the same ways as the base class's return type.

- protected copy constructor and assignment operator
- public virtual clone method

#+begin_src cpp
  class Base
  {
  public:
    virtual Base* Clone() = 0;
  };

  class Derivedn : public Base
  {
  public:
    //This is OK, its called covariant return type.
    Derivedn* Clone()
    {
      return new Derivedn(*this);
    }
  private:
    Derivedn(const Derivedn&) : ... {}
  };
#+end_src

#+begin_src cpp
  class B {
  public:
      B() = default;
      virtual ~B() = default;
      virtual gsl::owner<B*> clone() const = 0;
  protected:
       B(const B&) = default;
       B& operator=(const B&) = default;
       B(B&&) = default;
       B& operator=(B&&) = default;
      // ...
  };

  class D : public B {
  public:
      gsl::owner<D*> clone() const override
      {
	  return new D{*this};
      };
  };
#+end_src


** Virtual Functions

*** Virtual function specifier
References:
- [[https://en.cppreference.com/w/cpp/language/virtual][cpp - virtual function specifier]]
- [[https://stackoverflow.com/a/4895297][Stack - C++ "virtual" keyword for functions in derived classes. Is it necessary?]]

The virtual specifier specifies that a non-static member function is virtual and supports dynamic dispatch. It may only appear in the decl-specifier-seq of the initial declaration of a non-static member function (i.e., when it is declared in the class definition). 

Virtual functions are member functions whose behavior can be overridden in derived classes. As opposed to non-virtual functions, the overriding behavior is preserved even if there is no compile-time information about the actual type of the class. That is to say, if a derived class is handled using pointer or reference to the base class, a call to an overridden virtual function would invoke the behavior defined in the derived class. Such a function call is known as virtual function call or virtual call. Virtual function call is suppressed if the function is selected using qualified name lookup (that is, if the function's name appears to the right of the scope resolution operator ::).

#+begin_src cpp
  #include <iostream>

  struct Base
  {
      virtual void f()
      {
	  std::cout << "base\n";
      }
  };

  struct Derived : Base
  {
      void f() override // 'override' is optional
      {
	  std::cout << "derived\n";
      }
  };

  int main()
  {
      Base b;
      Derived d;

      // virtual function call through reference
      Base& br = b; // the type of br is Base&
      Base& dr = d; // the type of dr is Base& as well
      br.f(); // prints "base"
      dr.f(); // prints "derived"

      // virtual function call through pointer
      Base* bp = &b; // the type of bp is Base*
      Base* dp = &d; // the type of dp is Base* as well
      bp->f(); // prints "base"
      dp->f(); // prints "derived"

      // non-virtual function call
      br.Base::f(); // prints "base"
      dr.Base::f(); // prints "base"
  }
#+end_src

The 'virtualness' of a function is propagated implicitly. Adding the ~virtual~ keyword to the derived functions is not neccesary (), but it is recommneded as it clearly 'advertises' the fact to the user that the function is virtual. This will be important to anyone further sub-classing B without having to check A's definition. For deep class hierarchies, this becomes especially important.

*** Virtual Member Functions (Methods)
References:
- [[https://en.cppreference.com/w/cpp/language/virtual][cpp reference - virtual function specifier]]

 Virtual functions are member functions whose behavior can be overridden in derived classes. As opposed to non-virtual functions, the overriding behavior is preserved even if there is no compile-time information about the actual type of the class. That is to say, if a derived class is handled using pointer or reference to the base class, a call to an overridden virtual function would invoke the behavior defined in the derived class. Such a function call is known as virtual function call or virtual call.
 
  
*** Virtual Destructors
References:
- [[https://stackoverflow.com/a/10026522][Stack - C++ Virtual functions but no virtual destructors]]
- [[https://en.cppreference.com/w/cpp/language/virtual][cpp - virtual function specifier]]
- [[https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c35-a-base-class-destructor-should-be-either-public-and-virtual-or-protected-and-non-virtual][C++ CoreGuidelines - A base class destructor should be either public and virtual, or protected and non-virtual]]
  
A useful guideline is that the destructor of any base class must be public and virtual or protected and non-virtual, whenever delete expressions are involved:

To prevent undefined behavior. If the destructor is public, then calling code can attempt to destroy a derived class object through a base class pointer, and the result is undefined if the base class's destructor is non-virtual. If the destructor is protected, then calling code cannot destroy through a base class pointer and the destructor does not need to be virtual; it does need to be protected, not private, so that derived destructors can invoke it. In general, the writer of a base class does not know the appropriate action to be done upon destruction.

** Abstract Classes
References:
- [[https://en.cppreference.com/w/cpp/language/abstract_class][cppreference - Abstract classes]]

Defines an abstract type which cannot be instantiated, but can be used as a base class.

*** Syntax
A pure virtual function is a virtual function whose declarator has the following syntax:

#+begin_src c++
declarator virt-specifier(optional) = 0 		
#+end_src

Here the sequence = 0 is known as pure-specifier, and appears either immediately after the declarator or after the optional virt-specifier (override or final).

pure-specifier cannot appear in a member function definition or friend declaration.

An abstract class is a class that either defines or inherits at least one function for which the final overrider is pure virtual.

*** Explanation
Abstract classes are used to represent general concepts (for example, Shape, Animal), which can be used as base classes for concrete classes (for example, Circle, Dog).

No objects of an abstract class can be created (except for base subobjects of a class derived from it) and no non-static data members whose type is an abstract class can be declared.

Pointers and references to an abstract class can be declared.

Making a virtual call to a pure virtual function from a constructor or the destructor of the abstract class is undefined behavior (regardless of whether it has a definition or not).

** Interfaces
References:
- [[https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rh-abstract][CPP Core Guidelines - If a base class is used as an interface, make it a pure abstract class]]

A class is more stable (less brittle) if it does not contain data. Interfaces should normally be composed entirely of public pure virtual functions and a default/empty virtual destructor.

** The Rule of Three
Reference:
- [[https://en.wikipedia.org/wiki/Rule_of_three_%28C++_programming%29][Wikipedia - The Rule of three]]
- [[https://stackoverflow.com/questions/16752850/assignment-operator-and-deep-copy][Stack - Assignment operator and deep copy]]

The rule of three (also known as the law of the big three or the big three) is a rule of thumb in C++ (prior to C++11) that claims that if a class defines any of the following then it should probably explicitly define all three:
- destructor
- copy constructor
- copy assignment operator

Because implicitly-generated constructors and assignment operators simply copy all class data members ("shallow copy"), one should define explicit copy constructors and copy assignment operators for classes that encapsulate complex data structures or have external references such as pointers, if you need to copy the objects pointed to by the class members.

** Circular references
References:
- [[https://stackoverflow.com/a/553869][Stack - When can I use a forward declaration?]]



Put yourself in the compiler's position: when you forward declare a type, all the compiler knows is that this type exists; it knows nothing about its size, members, or methods. This is why it's called an incomplete type. Therefore, you cannot use the type to declare a member, or a base class, since the compiler would need to know the layout of the type.

What you can do with an incomplete type:

- Declare a member to be a pointer or a reference to the incomplete type

- Declare functions or methods which accept/return incomplete types

- Define functions or methods which accept/return pointers/references to the incomplete type (but without using its members).

** Other References
- [[https://en.cppreference.com/w/cpp/language/derived_class][cpp reference - derived class]]
- [[https://stackoverflow.com/questions/20234898/more-modern-way-of-looping-through-c-arrays][Stack - more modern way of looping through C++ arrays]]
- [[https://github.com/isocpp/CppCoreGuidelines][Cpp CoreGuideLine]]
*** Initializing an array

**** How to initialize an "empty" array
References: [[https://en.cppreference.com/w/c/language/array_initialization][cppreference - Array initialization]]

To initialize an empty array:
#+begin_src
my_array[10] = {}
#+end_src

**** Array initialization using initialization list
Reference:
- [[https://stackoverflow.com/questions/44500501/how-to-initialize-an-array-using-initializer-list-c][stack - How to Initialize an array using initializer-list C++]]
- [[https://stackoverflow.com/questions/27382036/zero-initialize-array-member-in-initialization-list][Stack - Zero-Initialize array member in initialization list]]

*** Override specifier cpp11
References:
- [[https://en.cppreference.com/w/cpp/language/override][cppreference - override specifier]]

Specifies that a virtual function overrides another virtual function

*** Default specifier cpp11
Reference:
- [[https://en.cppreference.com/w/cpp/language/default_constructor][cppreference - Default connstructors]]

A default constructor is a constructor which can be called with no arguments (either defined with an empty parameter list, or with default arguments provided for every parameter).

#+begin_src cpp
class-name () = default;
#+end_src

With the default specifier the compiler will define the implicit default constructor even if other constructors are present.

**** To check
- [[https://stackoverflow.com/questions/46918749/how-to-clone-an-object-without-copy-constructor][stack - How to clone an object without copy constructor]]
- [[https://herbsutter.com/2019/10/03/gotw-ish-solution-the-clonable-pattern/][GotW-ish Solution: The ‘clonable’ pattern]]
- [[https://stackoverflow.com/questions/12255546/c-deep-copying-a-base-class-pointer][stack - C++: Deep copying a Base class pointer]]
- [[https://stackoverflow.com/questions/5731217/how-to-copy-create-derived-class-instance-from-a-pointer-to-a-polymorphic-base-c][stack - How to copy/create derived class instance from a pointer to a polymorphic base class?]]
- [[https://stackoverflow.com/questions/57176738/copy-constructor-for-derived-class][stack - Copy Constructor for derived class]]
- [[http://www.gotw.ca/publications/mill06.htm][Uses and Abuses of Inheritance]]
